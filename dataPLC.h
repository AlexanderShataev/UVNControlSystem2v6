#pragma once
namespace UVNControlSystem2v6 {

	using namespace System;
	ref class dataPLC
	{
	public:

		//Данный класс содержит в себе данные о памяти обмена с PLC. ниже преведена минимальная информация 
		//о передаваемых данных:
		//================ SharedMemory  type Unsigned Int =====================

		//№Rg-Sh_Mem[№]-Value------------------------Примечание-----------------------------------------------
		//  1	0	R_Quants,				Слово состояния процессов
		//  2   1   B_ac_TIC,	 			Аналоговый сигнал с TIC (обороты ТМН)
		// 	3   2   ac_APG,     			Давление с вакууметра APG
		// 	4   3   ac_WRG,    				Давление с вакууметра WRG
		//	5   4   ac_Tpod,      			Температура подложки
		//	6   5   ac_BV_poz,    			Положение заслонки BV (свободно)
		//	7   6   ac_TPlB_Uact, 			Фактическое напряжение TPlB
		//	8   7   ac_TPlB_Iact,  			Фактический ток TPlB
		//	9	8	ac_TPlB_Pact,			Фактическая мощность TPlB
		//	10	9	au_PSV1,		 		Фактическое управление на PSV1
		//	11	10	au_PSV2,				Фактическое управление на PSV2
		//	12	11	au_TPlB_Iset			Установленный  ток на TPlB
		//	13	12	au_TPlB_Uset			Установленное напряжение на TPlB
		//  14  13	rg_dc					Регистр ДК 	Биты соответствуют маскам DC
		//  15  14 	rg_dm					Регистр ДУ 	Биты соответствуют маскам DM
		//  16  15  Буфер ошибок PLC.		См. "Коды_ошибок.С"  
		//	17	16	act_poz_BV				Фактическое положение заслонки BV
		//  18	17	davlenieBV				Давление, считываемое клапаном BV
		//	19	18	learnm					Ответ бабочки на запрос LEARN STATUS
		//  20	19	Резерв
		//	21	20	Признак команды клиента "Запись в SharedMemory" 0 - не запись
		//  22  21  Команды оператора в соответствии с SharedMemory.doc
		//----------------------------------------------------------------------------------------------------
		//				1		vacuum_start()		Запуск процесса откачки
		//				2		Vacuum()			Запуск только автоматически
		//				3		vacuum_stop()		Запуск остановки откачки
		//				4		napusk1_St()		Шаговый режим напуска PSV1 - уставка в RG24
		//				5		napusk2_St()		Шаговый режим напуска PSV2 - уставка в RG25
		//				60		COM1exchench()		Позиционирование ВV, позиция 0..10000 через dop_command RG26
		//				61		COM1exchench()		Открыть BV
		//				62		COM1exchench()		Закрыть BV
		//				63		COM1exchench()		Контроль позиции BV
		//				64		COM1exchench()		Zero
		//				66		COM1exchench()		Pressure control
		//				67		COM1exchench()		LEARN
		//				68		COM1exchench()		LEARN status
		//				7		TPlB_LV()			Вкл,Выкл низковольтный режим TPlB, инв.проц.
		//				8		TPlB_HV()			Вкл,Выкл высоковольтный режим TPlB, инв.проц.
		//				9		TPlB_IU_St()		Вкл,Выкл шаговый режим установки тока и напр.TPlB,
		//											уставка тока 0..10000 через RG27, напр. RG28
		//				10		nagrev()			Вкл,Выкл процесс нагрева подложки, инв.проц.
		//				11		napyl()				Вкл,Выкл процесс напыления
		//				17		zasl()				Повернуть на 180 гр. заслонку, инветировать положение
		//			-------------------------------- Команды отладки------------------------------------
		//			100		Установка канала АУ. Номер канала - в dop_command - регистр 23(22)
		//					у клиента (сервера), величина уставки - в регистр 50(49)			
		//			------------------------------------------------------------------------------------
		//			300		Инверсия канала ДУ. Номер канала - в dop_command - регистр 23(22)
		//					у клиента (сервера).
		//			------------------------------------------------------------------------------------
		//			1000		Выход из программы
		////----------------------------------------------------------------------------------------------------
		//	23	22	Дополнительное слово команды, см. коды 200..203
		//	24	23	au_PSV1			Напряжение на PSV1 в дискретах
		//	25	24	au_PSV2			Напряжение на PSV2 в дискретах
		//	26	25	zad_poz_BV		Заданная позиция BV
		//	27	26	au_TPlB_Iset	Шаговое управление током TPlB
		//	28	27	au_TPlB_Uset 	Шаговое управление напряжением TPlB 
		//	29	28	zad_Temp		Заданная температура подложки
		//	30	29	zad_t_napyl		Заданное время напыления
		//	31  30 	p_contr 		Заданное давление для контроля клапаном BV
		//	32  31 	k1 		Заданное давление для контроля клапаном BV
		//	33  32 	k2 		Заданное давление для контроля клапаном BV
		//	34  33 	k3		Заданное давление для контроля клапаном BV		
		//-------------------Параметры настроечного листинга----------------------
		//	30...45
		//--------------------------------------------------------------------------------------------------------   
		// КОНЕЦ ИНФОРМАЦИИ

		//	ОБЪЯВЛЕНИЯ
		//--------------------------------------
		//	Константы перевода
		//  ТЕМПЕРАТУРА
		//	ПЕРЕВОД ДИСКРЕТ В ГРАДУСЫ t_podl=DtoT_A*D^2+DtoT_B*D+DtoT_C
		//
		const double 
		
		DtoT_A = 0.00000683,
		DtoT_B = 0.179277,
		DtoT_C = -112.2168,
		//
		//	ПЕРЕВОД ГРАДУСЫ В ДИСКРЕТЫ D=TtoD_A*t_podl^2 + TtoD_B*t_podl + TtoD_C
		//
		TtoD_A = -0.000837733,	
		TtoD_B = 5.302,		
		TtoD_C = 612.3;		
		//--------------------------------------


		//	Переменные и массивы
		//--------------------------------------
		//	СТАТУС СОЕДИНЕНИЯ
		bool main_connecting_status;						//лог 1 -- соединение есть, 0 -- соединения нет

		//	МАССИВ на ПЛК
		array<int>^ data = gcnew array<int>(13);			//Массив, передающий данные с PLC на PLC:: HoldingRegisters 21-30 

		//	МАССИВ с ПЛК
		array<int>^ share_mem = gcnew array<int>(30);		//Массив, принимающий данные с PLC на PC:: HoldingRegisters 1-30 

		//	МАССИВ ОБРАБОТКИ ИНФОРМАЦИИ
		array<int>^ masckon = gcnew array<int>(16);			//Массив маски дискретного управления
		//--------------------------------------


		//	Переменные (величины) таймера
		unsigned int

			work_time = 0,
			tick = 1,

			STime_start_vacuum = 0,
			STime_vacuum = 0,
			STime_stop_vacuum = 0,
			STime_gases = 0,
			STime_TPlB = 0,

			LTime_start_vacuum = 0,
			LTime_vacuum = 0,
			LTime_stop_vacuum = 0,
			LTime_gases = 0,
			LTime_TPlB = 0;


		bool gasesOnOff = false;


		String^ DataTime_start_vacuum;
		String^ DataTime_vacuum;
		String^ DataTime_stop_vacuum;
		String^ DataTime_gases;
		String^ DataTime_TPlB;


		//	Переменные (величины) передаваемые на PLC
		//-------------------------------------
		unsigned int

			//ПЕРЕДАЧА ДАННЫХ н
			command,										//cmd -- передача команды управления share_mem[21]
			set_PSV1,										//Фактическое управление на PSV1 (дискретное значение 0-10000 мВ)
			set_PSV2,										//Фактическое управление на PSV1 (дискретное значение 0-10000 мВ)
			set_BV,											//Заданное положение BV
			set_temp,										//Заданная температура подлокжодержателя
			set_TPlB_I,										//Заданная сила тока TPlB
			set_TPlB_U,										//Заданное напряжение TPlB
			//
			//НОМЕРА команд command (cnmd) share_mem[21]+
			vacuum_start	=  1,
			vacuum			=  2,
			vacuum_stop		=  3,
			gas_PSV1		=  4,
			gas_PSV2		=  5,
			COM1exchench,
			TPlB_LV			=  7,
			TPlB_HV			=  8,
			TPlB_IU_S		=  9,
			nagrev			= 10,
			process			= 11;
		//--------------------------------------




//НОМЕРА команд command (cnmd) share_mem[21]+
//--------------------------------------
unsigned int
//	Переменные (величины) передаваемые на PC с PLC
r_quants,										//Слово состояния процессов
B_ac_TIC,										//Аналоговый сигнал с TIC (обороты ТМН)
ac_APG,											//Давление с вакууметра APG
ac_WRG,											//Давление с вакууметра WRG
ac_Tact,										//Показание датчика температуры (терморезистора)
ac_BVact,										//Свободно
ac_TPlB_Uact,									//Фактическое значение напряжения TPlB
ac_TPlB_Iact,									//Фактическое значение силы тока TPlB
ac_TPlB_Pact,									//Фактическое значение мощности TPlB
au_PSV1,										//Фактическое управление на PSV1
au_PSV2,										//Фактическое управление на PSV2
au_TPlB_Iset,									//Фактическое установленное значение силы тока TPlB
au_TPlB_Uset,									//Фактическое установленное значение напряжения TPlB		
rg_dc,											//Регистр ДК 	Биты соответствуют маскам DC
rd_dm,											//Регистр ДУ 	Биты соответствуют маскам DM
buffer_PLC_error,								//См. "Коды_ошибок.С" 
act_PV_position,								//Фактическое положение бабочки
pressureBV,										//Давление с бабочки
learn;
//--------------------------------------



//Функциии переводы велечин
//--------------------------------------
int DegreesToDiscrete(int temp) {					//Перевод градусов в дискреты 

	return TtoD_A * temp * temp + TtoD_B * temp + TtoD_C;

}

int DiscreteToDegrees(int Discrete) {				//Перевод дискрет в градусы

	return DtoT_A * Discrete * Discrete + DtoT_B * Discrete + DtoT_C;

}

int mBarToDiscrete(int mBar) {						//Перевод давления мбар в дискреты АЦП 

}

int DiscreteTomBar(int Discrete) {					//Перевод дискрет АЦП в давление мбар

}

//--------------------------------------


//Посылка на сервер ModbusTCPServer 	
//--------------------------------------
void date_to_array() {



	data[0] = 20;
	data[1] = command;								// cmd_word
	data[2] = work_time;
	data[3] = set_PSV1;								//au_PSV1 в дискретах
	data[4] = set_PSV2;								//au_PSV2 в дискретах
	data[5] = set_BV;								//позиция BV (клапан-бабочка)
	data[6] = set_TPlB_I;							//au_TPlB_Iset
	data[7] = set_TPlB_U;							//au_TPlB_Uset
	data[8] = DegreesToDiscrete(set_temp);			//Заданная температура в дискретах, требуется функция пересчета
	data[9] = 0;
	data[10] = 0;									//p_заданное давление BV
	data[11] = work_time;							//PID

}

//Прием посылки с ПЛК

void recieve_data(int recieving[30]) {

	for (int i = 0; i <= 30; i++) {

		share_mem[i] = recieving[i];

	}

}

//Обработка r_quants


	void process_quants() {		//Если true -- процесс запущен, false -- не запущен

	masckon[0] = 1;
	masckon[1] = 2;
	masckon[2] = 4;
	masckon[3] = 8;
	masckon[4] = 16;
	masckon[5] = 32;
	masckon[6] = 64;
	masckon[7] = 128;
	masckon[8] = 256;
	masckon[9] = 512;
	masckon[10] = 1024;
	masckon[11] = 2048;
	masckon[12] = 4096;
	masckon[13] = 8192;
	masckon[14] = 16384;
	masckon[15] = 32768;

	}


	bool process_quants(int bit) {					////Если true -- процесс запущен, false -- не запущен


	if ((r_quants & masckon[bit]) != 0) {

		return true;

	}

	else  {

		return false;
	}


}

	};

};